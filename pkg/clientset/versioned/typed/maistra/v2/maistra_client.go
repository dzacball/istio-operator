// Code generated by client-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/maistra/istio-operator/pkg/apis/maistra/v2"
	"github.com/maistra/istio-operator/pkg/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type MaistraV2Interface interface {
	RESTClient() rest.Interface
	ServiceMeshControlPlanesGetter
}

// MaistraV2Client is used to interact with features provided by the maistra.io group.
type MaistraV2Client struct {
	restClient rest.Interface
}

func (c *MaistraV2Client) ServiceMeshControlPlanes(namespace string) ServiceMeshControlPlaneInterface {
	return newServiceMeshControlPlanes(c, namespace)
}

// NewForConfig creates a new MaistraV2Client for the given config.
func NewForConfig(c *rest.Config) (*MaistraV2Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &MaistraV2Client{client}, nil
}

// NewForConfigOrDie creates a new MaistraV2Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *MaistraV2Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new MaistraV2Client for the given RESTClient.
func New(c rest.Interface) *MaistraV2Client {
	return &MaistraV2Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v2.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *MaistraV2Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
